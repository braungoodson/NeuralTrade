module.exports = function (PID,PORT,BUYIN,CASH,BTC,BUYCHIP,FUTURE,KEY,SECRET) {

	var h = require('https');
	var N = require('brain').NeuralNetwork;

	var ticker;
	var trainingData = [];
	var predictions = [];
	var buyIn = BUYIN;
	var cash = CASH;
	var btc = BTC;
	var profit = 0;
	var rate = 0;
	var prediction;
	var buyChip = BUYCHIP;
	var fee = null;

	predictions.push({});

	var tradeApi = require('btc-e-trade-api');
	tradeApi.init(KEY,SECRET);
	tradeApi.getInfo(getInfoHandler);

	function getInfoHandler(info) {
		cash = info['return'].funds.usd;
		buyIn = cash;
		btc = info['return'].funds.btc;
	}

	function buy(r) {
		var cost = buyChip * r;
		if (cost <= cash) {
			//tradeApi.buy(buyChip,r,callback);
			//function callback(info) {
				//if (info.success == 1) {
					//cash = info['return'].funds.usd;
					//btc = info['return'].funds.btc;
				//}
				cash = cash - cost;
				btc = btc + 0.01
				return dump();
			//}
		}
	}

	function sell(r) {
		var cost = 0.01 * fee;
		if ((btc >= 0.01) && cost <= cash) {
			//tradeApi.sell(0.01,r,callback);
			//function callback(info) {
				//if (info.success == 1) {
					//cash = info['return'].funds.usd;
					//btc = info['return'].funds.btc;
				//}
				var sale = 0.01 * r;
				cash = cash + sale;
				btc = btc - 0.01;
				return dump();
			//}
		}
	}

	function stay() {

		return dump();
	}

	function chooseDestiny(a,b,buyRate,sellRate) {
		if (a.buy > b.buy) {
			buy(buyRate);
			prediction = 'buy';
		} else if (a.buy < b.buy) {
			sell(sellRate);
			prediction = 'sell';
		} else {
			stay();
			prediction = 'stay';
		}
	}

	function callback(d) {
		var n = new N();
		trainingData.push(d[1]);
		n.train(trainingData);
		var o = {
			date: (new Date().toUTCString() + FUTURE) * .00000000001
		};
		predictions.push(n.run(o));
		rate = ((d[0].sell+d[0].buy)/2);
		chooseDestiny(
			predictions[predictions.length-1],
			predictions[predictions.length-2],
			d[0].buy,
			d[0].sell
		);
	}

	function _process(p) {
		//
		callback(p);
	}

	function parse(d) {
		ticker = d.ticker;
		var x = .000001;
		var y = .0000000001;
		var z = .00000000001;
		var i = {
			date: d.ticker.updated * z
		};
		var o = {
			buy: d.ticker.buy * x,
			sell: d.ticker.sell * x,
			high: d.ticker.high * x,
			low: d.ticker.low * x,
			avg: d.ticker.avg * x,
			vol: d.ticker.vol * y,
			vol_cur: d.ticker.vol_cur * y
		};
		return _process([
			{buy:d.ticker.buy,sell:d.ticker.sell},
			{input:i,output:o}
		]);
	}

	function dump() {
		profit = (((btc * rate) + cash) - buyIn);
		console.log('');
		console.log('          \033[32m$\033[0m '+cash);
		console.log('        \033[33mBTC\033[0m '+btc);
		console.log('     \033[34mProfit\033[0m '+profit);
		console.log('       \033[35mRate\033[0m '+rate);
		console.log(' \033[31mPrediction\033[0m '+prediction);
	}

	setInterval(function(){
		h.get('https://btc-e.com/api/2/btc_usd/ticker',function(r){
			var b = '';
			r.on('data',function(c){
				b += c;
			});
			r.on('end',function(d){
				try {
					var d = JSON.parse(b);
				} catch (e) {
					console.log('\033[31m Could not parse feed: '+e+'\033[0m');
				}
				parse(d);
			});
		}).on('error',function(r){
			//
			console.log(' \033[31m Error: '+e);
		});
	},FUTURE);

	var fs = require('fs');
	var app = __dirname+'/app/index.html';
	var users = [];
	users['braun'] = {name:'braun',password:'braun',data:null,getUser:function(){return{name:this.name,data:this.data}}};

	fs.readFile(app,function(e,d){
    if (e) {
      console.log('\033[31mError reading file: %s\n\033[0m',e);
    } else {
      app = d;
      console.log('\033[36mCache is cached!\033[0m');
    }
  });

	var mario = require('mario-mario');
	mario.plumbing({
		port: PORT,
		http: {
			get: {
				'/': function (q,r) {
					r.setHeader('Content-Type','text/html');
					return r.send(app);
				},
				'/ticker': function(q,r) {
					return r.send({ticker:ticker});
				},
				'/bot': function (q,r) {
						return r.send({
						cash: cash,
						btc: btc,
						profit: profit,
						rate: rate,
						prediction: prediction,
						pid: PID
					});
				}
			}
		}
	});
}